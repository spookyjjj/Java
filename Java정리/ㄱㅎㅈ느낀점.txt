문제: 등록버튼 하나에 조건-> 수정 중인 건지, 공란은 없는지, 소지금은 있는지, 5게임을 다 구매한 후는 아닌지 다 생각해줘야하니 너무 복잡해졌다
또한 한가지 기능을 실행중에 다른 여러 버튼을 누를수 있어서 모든 상황에 대처하기가 힘들었다.
해결: 애초에 조건이 달성이 안되면 버튼들을 비활성화 시켜놓음으로써 사용자의 선택지를 줄여버리면 내가 다루어야하는 상황의 경우의수가 대폭 줄어든다~

문제: 여러클래스에서 사용해야하는 정보나 메소드가 있는데, 이를 각각의 클래스에서 인스턴스로 생성해 버리면 각각 별개의 정보를 가지고 있게되서 정보 공유가 안된다~
해결: 모든 클래스가 공통으로 접근해야 하는 정보들은 static을 사용해서 해결

문제: a클래스 정보를 가지고 b로 넘어가기 위해 a클래스 안에 b인스턴스를 생성하였고, a에서 액션이 일어나도 b를통해 b클래스의 필드와 메소드에는 접근해 b에 변화를 주는게 가능했지만, 역으로 b에서 액션이 일어났을때 a에 접근해 변화를 주는게 힘들었다
해결: 결국은 b가 건드려야할 a들을 static으로 만들어주었는데,,찝찝하다

문제: jfame을 상속하는 클래스를 만들 때, 생성자 안에 컴포넌트를 선언하고 인스턴스생성도 하다보니, 그 컴포넌트를 이용하는 메소드를 작성할 때 필드로 끄집어 내야하는 불편함이 있었고 그 과정에서 이중선언이 되거나 인스턴스 생성이 되지않는(null)경우가 발생하는 오류가 자주 발생했다.
해결:  애초에 컴포넌트들은 필드로 만들어 버리는게 어떨까?

문제: 오류가 발생하여도 뭐가 문제인지 못읽어냄
해결: 좀 더 오류메시지에 익숙해져야함

문제: 메소드 하나에 기능을 넣으면( a,b,c,d 넣어놓고 결국 e라는 결과를 내는) 다른곳에서 b기능만 필요할 때 또 메소드를 만들어줘야하는 불편함이 있었다
해결: 애초에 기능을 잘게잘게 쪼개서 만드는게 좋다

문제: 내가 구현할 기능와 팀원이 구현할 기능이 다르다고 해도 그 과정에서 공통적으로 수행되어야하는 절차가 있으면 그걸 각자 메소드로 만들어버림 -> 메소드가 중복되고 헷갈리기 시작함
해결: 각자가 작성한 코드를 서로 인지시켜주는 과정, 혹은 주석에다 구구절절 상세하게 써놓는 과정이 필요하겠다

문제: 당연히 null로 되어있다고 생각하고 실컷 코드를 작성한 후에 테스트해보면 실제로는 0이나 ""로 되어있어 실행오류가 나는 경우가 많았다. 마찬가지로 equals또한 값의 동일이라고 생각하고 생각했지만 사실은 참조의 동일인 경우가 있었다. 이때 정말 오류 찾기 힘들다
해결: 처음보는 클래스를 사용할 때는 기본값이 무엇인지, equals는 뭘 같다고 인식하는지 체크하고 시작하는게 좋다. 아니면 내가 나만의 기본값, 나만의 equals2를 만들어놓고 쓰는게 좋을듯

=================
생성자 겟터 셋터
static이해하기
interface, interface에 추상메소드가 많으면 adaptor만들어가면서 처리하면 서로간 충돌을 피할 수 있다

addMouseListener(파라미터로 MouseListener(추상클래스)도 받고 MouseAdapter(클래스 : implements MouseListner)도 받을 수 있다)

btn.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				super.mouseClicked(arg0);
			}
});
